Coleccion de segunda seccion de retos 
retos javascript nivel medio

primer reto sumar un rango de numero dado por un arreglo de 2 miembros
function sumAll(arr) {
  let res = 0;
  if(arr[0] < arr[1]){
    for(let i = arr[0]; i <= arr[1]; i++){
        res += i;
        
    }
  }else{
   for(let i = arr[1]; i <= arr[0]; i++){
        res+= i;
    }
  }
  
console.log(res)

  return res;
}

sumAll([5, 10]);


Encontrar los miembros no repetidos de dos arreglos
se dan dos arreglos de varios datos, se tiene que encontrar que valores s[olo existen en uno de los arreglos
arr1.filter(function(obj) {
  	return arr2.indexOf(obj) == -1;
  }); //encuentra los valores que no existen en el segundo arreglo
  var newArr2 = arr2.filter(function(obj){
  return arr1.indexOf(obj) == -1;
  }); //encuentra los valores que no existen en el primer arreglo
  
  return newArr.concat(newArr2); //regresa un arreglo con los valores que s[olo existen en uno de los arreglos



Encontrar los valores que no coinciden con uno o m[as parametros
Ejemplo [1,2,3,1,2,3] y los valores 2, 2 el resultado debe ser [1,1] 

function destroyer(arr){

  let newArr = Array.prototype.slice.call(arguments);//crea un arreglo de todos los argumentos que se pasan con la funci[on
						     // estes arreglos despu[es se compara con los argumentos del arreglo ogininal
  for(let i in arr){
  	for(let j in newArr){
    	if(arr[i] === newArr[j]){
      	delete arr[i];
      }
    }
  }
  console.log(arr.filter(Boolean));
  return arr;
}
 
console.log(destroyer([1, 2, 3, 1, 2, 3], 2, 3));

suluci[on usando filter
function destroyer(arr) {
  var args = Array.from(arguments).slice(1);
  return arr.filter(function(val) {
    return !args.includes(val);
  });
}


Dado 1 arreglo de objetos, encontrar si es que dado un objeto regresar que elemento del arreglo contiene el objeto dado
function whatIsInAName(collection, source) {
  var arr = [];
  // Only change code below this line

 /*for(let i in collection){
 	 if(!collection[i].hasOwnProperty(source)){
   arr.push(collection[i]);
   }
 }*/
let newArr = Object.keys(source); //se guardan las keys del objeto a buscar 
	arr = collection.filter(function(obj){ //se establece el filtro a cumplir
  	for(let i = 0; i < newArr.length; i++){
    	if(!obj.hasOwnProperty(newArr[i]) || //la primera condici[on es si la propiedad tiene la key o no
      obj[newArr[i]] !== source[newArr[i]]){ // la segunda condici[on es si la key no corresponde a una nueva key 
      	return false;
      } 
    }
    return true;
  })
 
 console.log(arr);
  // Only change code above this line
  return arr;
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });
whatIsInAName([{ "apple": 1 }, { "apple": 1 }, { "apple": 1, "bat": 2 }], { "apple": 1 })




Ejemplo de uso de Regex para poder editar y dar forma a una string (practicar regex)
function spinalCase(str) {
  let arr = str.replace(/([a-z])([A-Z])/g, "$1 $2");
  //let st1 = arr.join('-')
  console.log(arr);
  let st1 = arr.replace(/\s+|_+/g,'-').toLowerCase();
  return st1 ;
}

console.log(spinalCase('thisIsSpinalTap'));


Ejemplo de Pig Latin en el caso de las palabras que empiezan con una o mas consonantes se pasa este grupo al finaly se agregar ay
en el caso de las palabras que empiezas en vocales s[olo se agrega way al final
Mi soluci[on
function translatePigLatin(str) {
  let consta = "/^[bcdfghjklmnpqrstvwxyz]+/gi";
  
  if(str.match(/^[aeiouAEIOU].*/)){
  	console.log("empieza con vocal");
    let str1 = str.replace(/$/,"way")
    console.log(str1);
    return str1;
  }else{
   console.log("empiezas con consonante");
   let str2 = str.replace(/^[bcdfghjklmnpqrstvwxyz]+/gi,"");
   let chr = str.substr(0, str.length - str2.length);
   console.log(chr);
   let st4 = str.startsWith(consta);
   let str3 = chr + "ay"
   console.log(st4);
   console.log(str2.replace(/$/,str3));
   return str2.replace(/$/,str3);
  }
 
}

translatePigLatin("consonant");
translatePigLatin("glove");
translatePigLatin("schwartz")

la soluci[on de freecodecamp
function translatePigLatin(str) {
  let consonantRegex = /^[^aeiou]+/;
  let myConsonants = str.match(consonantRegex);
  return myConsonants !== null
    ? str
        .replace(consonantRegex, "")
        .concat(myConsonants)
        .concat("ay")
    : str.concat("way");
}

console.log(translatePigLatin("consonant"));


Search and replace
Encontrar una plabra en una string, remplazarla, si la palabra comienza con mayuscula el remplazo tambi[en debe de serlo también

function myReplace(str, before, after) {
let arr2 = str.split(" "), reg = "/[A-Z]/";
  let find1 = arr2.indexOf(before);
  if(find1 != -1){
  /*falta comprobar si la palabra que se compara empieza con upper case*/
  /*una vez validado que la palabra empieza con mayuscula, la de reeemplazo se debe cambiar la primera letra a uppercase */
  	console.log(find1 + "*");
    /*if(reg.test(arr2[find])){
     console.log("mayuscula")
    }*/
    after = after.toLowerCase();
    console.log(/[A-Z]/.test(arr2[find1]));
    if(/[A-Z]/.test(arr2[find1])){
    	after = after.charAt(0).toUpperCase() + after.slice(1);
    }
    
    arr2.splice(find, 1, after);
    console.log(arr1);
  }
  str = arr2.join(" ");
  
  return str;
}
myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");
 console.log(myReplace("He is Sleeping on the couch", "Sleeping", "sitting"));
 
 console.log(myReplace("I think we should look up there", "up", "Down"));


DNA Paring
function pairElement(str) {
  return str;
}

pairElement("GCG");


DNA Pairing
dada una string de letras como GCAT, hacer parajas según su para genetico ejemplo, si el miembro es C su pareja tiene que ser G,
si es A tiene que hacer T y en manera inversa

function pairElement(str) {
 
 let arr = str.split(""), arr1 = [];
 
 arr.forEach(element => element === 'G' ? arr1.push([element, 'C']) :
 element === 'C' ? arr1.push([element, 'G']) :
 element === 'T' ? arr1.push([element, 'A']) : 
 element === 'A' ? arr1.push([element, 'T']) : console.log("la neta no"));
 
 console.log(arr1);
  return arr1;
}

pairElement("GCG"); 
pairElement("TTGAG")



Missing Letters
dado un string de letrar ordenadas alfabeticamente encontrar si es que la hay la letra faltante 
function fearNotLetter(str) {
  let arr = str.split('');
	for(let i = 0; i < arr.length + 1; i++){
  if((i +1) < arr.length){
  	if((arr[i].charCodeAt(0)+ 1) != arr[ i + 1].charCodeAt(0)){
      console.log(String.fromCharCode(arr[i+1].charCodeAt(0)));
  	return(String.fromCharCode(arr[i+1].charCodeAt(0) - 1));
   }
  }
 	 
  }
	
	return undefined;
}

fearNotLetter("abce");



Sorted Union
//soluci[on en freecodecamp y en la pc Linux



Convert HTML Entities
Convert the characters &, <, >, " (double quote), and ' (apostrophe), in a string to their corresponding HTML entities.
Solici[on que acepta freecodecamp
function convertHTML(str) {
    let arr = str.split(" ");
  
//  console.log(arr);
  let test ="";
   arr.forEach(function(element){
     for(let i in element){
    if(element[i] == '&'){
      //console.log(test);
      test += '&amp;';
      //console.log(test);
    }if(element[i] == '<'){
      test += '&lt;'
      //console.log(test);
    }if(element[i] == '>'){
      test += '&gt;'
      //console.log(test);
    }if(element[i] == '"'){
      test += '&quot;'
      //console.log(test);
    }if(element[i] == "'"){
      test += '&apos;'
      //console.log(test);
    }else{
      if(element[i] === '&' || element[i] === "<" || element[i] === ">" || element[i] === '"' || element[i] === "'" ){
      console.log(element[i]);
      }else{
        test += element[i];
      }
    }
  }
     test += " ";
 });
   console.log(test + "*");
  return test.slice(0, -1);
}

convertHTML("Dolce & Gabbana");
convertHTML("abc");
convertHTML("Hamburgers < Pizza < Tacos");
convertHTML("Sixty > twelve")
convertHTML('Stuff in "quotation marks"')
convertHTML("<>")

Soluci[on directa que acepta jsfiddle
function convertHTML(str) {

  let arr = str.split(" "), arr1 = [];
 arr.forEach(element => element == '&' ? arr1.push('&amp;') : element == '<' ? arr1.push('&lt;') : element == '>' ? arr1.push('&gt;') : element == '"' ? arr1.push('&quot;') : element == "'" ? arr1.push('$apos;') : arr1.push(element) );
  
  for(let i in arr1){
  	for (let j in arr1[i]){
    if(arr1[i][j] == '&'){
      arr1[i][j] = '&amp;';
    }if(arr1[i][j] == '<'){
      arr1[i][j] = '&lt;'
    }if(arr1[i][j] == '>'){
      arr1[i][j] = '&gt;'
    }if(arr1[i][j] == '"'){
      arr1[i][j] = '&quot;'
    }if(arr1[i][j] == "'"){
      arr1[i][j] = '&apos;'
    } 
    	
    }
  }
  console.log(arr1);
  
  return str = arr.join(" ");
}

console.log(convertHTML("Dolce & Gabbana"));
console.log(convertHTML("Hamburgers < Pizza < Tacos"));
console.log(convertHTML('Stuff in "quotation marks"'));


Summar todos los n[umeros impares de la serie fibonacci
S[olo se deben sumar los numero impares de la serie de fibonacci, y menores al n[umero dado
 let fibo = 1, res = 0, medio, odd = 0;
  for(let i = 0; i <= num; i++){
  	
   // console.log(i);
   medio = (fibo) + res;
   fibo = res;
   res = medio;
  // console.log(medio + 'fibo');
    if((medio % 2) != 0 && medio <= num){
    		odd += medio;
 			 }
  }
  console.log(odd + ' res');
  //onsole.log(res + '*');



Sumar los numeros primos entre 0 y un n[umero dado
function sumFibs(num) {
  
  let  res = 0, odd = 0;
  for(let i = 0; i <= num; i++){
    // console.log(i);
     //console.log(i + 'iter');
      	for(let j  = 2; j < i; j++){
          	if(i % j === 0){ 
            	res = 1;
              break;}
        	}
          if(i > 1  && res == 0){
          console.log(i+ " primes");
          odd += i;
          }
         /* for(let j = 2; j < i; j++){
          	if(i % j == 0){
            	res = 1;
              break;
            }
          }
          if( i > 1 && res == 0){
          console.log('primes' + i);
          odd += i;
          }*/
          res = 0;
       
  }
  console.log(odd + ' res');
  //onsole.log(res + '*');
  return odd;
}


sumFibs(10);
sumFibs(977);


Necesito practicar m[as mis algoritmos
encontrat el minimo comun denominador
function smallestCommons(arr) {//  minimo com[un multiplo dentro de un rango dado son todos los numeros entre los dos n[umero del arreglo]]
  
  /*let arr1 = [], i = arr[0], j = 0, gdc, arr2 = [],arr3 = [];
  console.log(i);
  for(let k = i; k <= arr[1]; k++){
  	arr1[j] = k;
    j++;
  }
 
   j = arr1[0];
   console.log(j);
   for(let i in arr1){
   	var GDC = gcd(j, arr1[i]);
    j = (j * arr[i] / GDC);
   }
   console.log(j);
  
  return i;
  
  function gcd(x, y){
  	if(x === 0){
  		return x;
  	}
    else {
    	return gcd(y, x % y);
    }
  }*/
   var range = [];
  for (var i = Math.max(arr[0], arr[1]); i >= Math.min(arr[0], arr[1]); i--) {
    range.push(i);
  }

  // can use reduce() in place of this block
  var lcm = range[0];
  for (i = 1; i < range.length; i++) {
    var GCD = gcd(lcm, range[i]);
    lcm = (lcm * range[i]) / GCD;
  }
  return lcm;

  function gcd(x, y) {
    // Implements the Euclidean Algorithm
    if (y === 0) return x;
    else return gcd(y, x % y);
  }
}


console.log(smallestCommons([1,5]));

Steamroller

Flatten a nested array. You must account for varying levels of nesting.

function steamrollArray(arr) {
  
  //console.log(arr1);
  console.log(losNumeros(arr));

  return losNumeros(arr); //sino deja un peque;o espacio al principio al final y no pasa el test de freecodecamp
  function losNumeros(arr){
    return arr.reduce((acc, item) => {
      return acc.concat(Array.isArray(item) ? losNumeros(item) : item)
    },[])
  }
}

steamrollArray([1, [2], [3, [[4]]]]);
steamrollArray([1, {}, [3, [[4]]]]);
steamrollArray([[["a"]], [["b"]]]);



Reto Traducir binario
Dado una string comformada por n[umeros binarios traducir y regresar la string
function binaryAgent(str) {

	let charCol = str.split(' ');
  str ="";
   charCol.forEach(element =>  str += String.fromCharCode(parseInt(element, 2)));
  console.log(str);
  
  return str;
}
//practicar m[as la funci[on map y entender que es lo que hace
binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");
binaryAgent("01001001 00100000 01101100 01101111 01110110 01100101 00100000 01000110 01110010 01100101 01100101 01000011 01101111 01100100 01100101 01000011 01100001 01101101 01110000 00100001");



Everything Be True
Dado un arreglo de objetos saber si contiene una propiedad dada, si la tiene saber si el valor de esta es valido (truthy)
function truthCheck(collection, pre) {
 let res =0;
 for(let i in collection){ //creo que el ciclo puede ser m[as limpio
 //console.log(Object.keys(collection[i]));
 //console.log(collection[i][pre]);
  if(collection[i].hasOwnProperty(pre) ){
   if(collection[i][pre] === false ||collection[i][pre] === "" || collection[i][pre] === null || collection[i][pre] === undefined || collection[i][pre] !== collection[i][pre] || collection[i][pre] === 0){
   	res++;
   }
   }if(collection[i][pre] === undefined){
   	res++;
  }
 }
  console.log(res +" ress");

  return res != 0 ? false : true;
  
}

truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex");


Dado un arreglo de objetos
con datos sobre la altitud promedio de un astro que orbita la tierra, borra este dato y sustituirlo con su periodo orbital, sin importar
el tamanio del arreglo
function orbitalPeriod(arr) {
  var GM = 398600.4418;
  var earthRadius = 6367.4447;
  var dosPi = 2 * Math.PI;
  
  for(let i in arr){
  	//console.log(Object.keys(arr[i]));
    arr[i].orbitalPeriod = Math.round(dosPi * Math.sqrt(Math.pow((earthRadius + arr[i].avgAlt), 3) / GM));// se agrega el nueva propiedad del objeto con el resultado de la formaula
    delete arr[i].avgAlt;//borrar la propiedad que no da la altitud pormedio
    //console.log(arr[i]);  
  }
  
  return arr;
}

console.log(orbitalPeriod([{name : "sputnik", avgAlt : 35873.5553}]));
console.log(orbitalPeriod([{name: "iss", avgAlt: 413.6}, {name: "hubble", avgAlt: 556.7}, {name: "moon", avgAlt: 378632.553}]));



Arguments Optional
dados dos argumentos comprobar que son n[umeros y regresar su suma, si alguno de los dos no es una numero regresar undefined, si 
s[olo se pasa un argumento valido se debe regresar una funci[on que tome un valor de numero y regresar la suma, si el nuevo 
valor no es un numero se debe regresar undefined
**este reto me ense;o que se pueden regresar funciones completas esperando parametros 0-o
function addTogether() {
  var checaChingadera = function(num){
  	if(typeof(num) != "number"){
    	return undefined;
    }else{
     return num;
    }
  }

  if(arguments.length == 2){
  	//console.log(arguments.length);
     if(typeof(arguments[0]) != "number" || typeof(arguments[1]) != "number"){
  	return undefined;
  }
  else{
  	var uno = checaChingadera(arguments[0]);
    var dos = checaChingadera(arguments[1]);
    return(uno + dos);
  }
  }else{
  	console.log('caso s[olo un valor]');
    var tres  = arguments[0];
   // console.log(tres);
    if(checaChingadera(tres)){
    	return function(arg2){ //regresar toda una funci[ion como resultado]
      	if(typeof(tres) === undefined || checaChingadera(arg2) === undefined){
        	return undefined;
        }
        else{
        	return tres + arg2;
        }
      }
    }
    	
    }
  
}

console.log(addTogether(2,3));
console.log(addTogether(2)(9));
console.log(addTogether("hola", 2));
console.log(addTogether(23, 30));
console.log(addTogether(5)("p"));
 

**Make a Person

Fill in the object constructor with the following methods below:

getFirstName()
getLastName()
getFullName()
setFirstName(first)
setLastName(last)
setFullName(firstAndLast)

Run the tests to see the expected output for each method. 
The methods that take an argument must accept only one argument and it has to be a string. 
These methods must be the only available means of interacting with the object.	crear un objeto con sus contructores

var Person = function(firstAndLast) {

	
	var fullName = firstAndLast;
  
  this.getFirstName = function() {
  		return fullName.split(" ")[0];
  };
  
  this.getLastName = function() {
  	return fullName.split(" ")[1];
  };
  
  this.getFullName = function() {
    return fullName;
  };
  
  this.setFullName = function(name) {
  	 fullName = name;
  };
  
  this.setFirstName = function(name){
  	fullName = name + " " + fullName.split(" ")[1];
  };
  
  this.setLastName = function(name){
  	fullName = fullName.split(" ")[0] + " " + name;
  };
  return firstAndLast;
};

var bob = new Person('Bob Ross');
console.log(bob.getFullName());
console.log(bob.getFirstName());
console.log(bob.getLastName());
bob.setFirstName('El');
console.log(bob.getFullName());
bob.setLastName('Cacas');
console.log(bob.getFullName());

console.log(bob.getFullName());












