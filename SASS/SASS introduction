Syntactically Awesome StyleSheets this is the meaning of SASS
QWhat it is, is a language extensiono of CSS, add simplify and mantian the style for the projects.

Examples of the basics of SASS:

1.- Almacenar variables
	Alamcenar varibles que guardan en este caso propiedades de CSS
	se definen de la sigueinte manera y se puede usar estar propiedades entre diferentes elementos de un archivo de CSS
<style type='text/scss'>

$text-color: red;

  .header{
    text-align: center;
    color: $text-color;
  }
  .blog-post, h2 {
    color: $text-color;
  }
</style>

<h1 class="header">Learn Sass</h1>
<div class="blog-post">
  <h2>Some random title</h2>
  <p>This is a paragraph with some random text in it</p>
</div>
<div class="blog-post">
  <h2>Header #2</h2>
  <p>Here is some more random text.</p>
</div>
<div class="blog-post">
  <h2>Here is another header</h2>
  <p>Even more random text within a paragraph</p>
</div>

2.- Anidar propiedades con sus cualidades 
	Por ejemplo si una propiedad tiene una lista dentro de html entonces SASS hace posible lo mismo con CSS
<style type='text/scss'>
  .blog-post {
    h1 {
    text-align: center;
    color: blue;
  }
  p {
    font-size: 20px;
  }
  }
  
</style>

<div class="blog-post">
  <h1>Blog Title</h1>
  <p>This is a paragraph</p>
</div>

3.- Crear elementos de CSS reusables con Mixins
	Un Mixin es un cojunto de declaraciones de CSS que se pueden reutilizar a trav[es del stylesheet.css s[olo se tiene usar 
	la palabra @mixin la propiedad que se quiere definir y para usarla en alg[un punto de CSS se usa la palabra @include
<style type='text/scss'>

  @mixin border-radius($radius){
    -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
  }

  #awesome {
    width: 150px;
    height: 150px;
    background-color: green;
    @include border-radius(15px);
  }
</style>

<div id="awesome"></div>

4.- Usar @if y @else para agregar logica a CSS
	Funcionan de la misma manera que otros lenguajes de programaci[on por ejemplo javaScript se puede hacer condiciones anidadas
	para cambiar las propiedas, de la misma manera se usa @mixin para usar @if y @else
<style type='text/scss'>
@mixin border-stroke($val){
@if $val == light {
  border: 1px solid black;
}@else if $val == medium{
  border: 3px solid black;
}@else if $val == heavy{
  border: 6px solid black;
}@else{
  border:none;
}
}

  #box {
    width: 150px;
    height: 150px;
    background-color: red;
    @include border-stroke(medium);
  }
</style>

<div id="box"></div> **no usar parentesis para las condiciones



5.- Usar @for para crear loops
	Se usa para modiifcar las valores de las propiedas se puede crear propiedades de grid o crear efectos o ejemplo
<style type='text/scss'>

    @for $j from 1 through 5{
        .text-#{$j} { font-size: 15px * $j;}
    }

</style>

<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>

6. Crear Loops usando @each 
	Dado un rango de valores se cuentan y se asignan a un grupo de propiedades de CSS
<style type='text/scss'>
  $colors: (color1: blue, color2: black, color3: red);
  @each $color in blue, black, red{
    .#{$color}-bg {background-color:$color;}
  }

  div {
    height: 200px;
    width: 200px;
  }
</style>

<div class="blue-bg"></div>
<div class="black-bg"></div>
<div class="red-bg"></div>

7.- Crear un loop usando @while
	Al igual que los ejemplos pasados se puede crear un loop para cambiar una propiedad
<style type='text/scss'>

$x: 1;
@while $x < 6{
    .text-#{$x} {font-size: 15px * $x;}
    $x: $x + 1;
}


</style>

<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>

8.- Agregar partes de un css a otro
	Para hacerlo se usa @import y el nombre de la propiedad a importar


9.- @extend
	Funciona como extends en java permite usar las propiedades de un elemento en otro
.info-important{
   @extend .info;
   background-color: magenta;
 }

