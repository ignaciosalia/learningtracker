Introduction to React
(still not shure about this part of freecodecamp I think need some updating)

What is?
Is a JavaScript library for building user interfaces, that are resusable and component-driven.

How it works?
Combining HTML and JAvascript in ist own mark up language calle JSX, Reacto also simplify the flow of data throughout the application


1.- Para usar React y JSX es necesario convertir su codigo a codigo JavaScript valido usando alguna herramienta como BABEL (un 
transpiler) para estos ejemplos las aplicaciones est[an llamando ReactDOM.render(JSX, document.getElementById('root'))
	Agregar elementos usando JSX:
const JSX = <h1>Hello JSX!</h1>; Agrega un titulo de peso H1

2.- Crear elementos complejos JSX
	Para hacer esto se usa anidaci[on, pero con la regla que estos elementos s[olo deben regresar un valor, para hacerlo
	se tiene un s[olo padre del que todos los dem[as elementos son parte, por ejemplo todos los elementos debe un blog
	deben pertencer dentro de un <div>
const JSX = <div>
    <h1></h1>
    <p></p>
    <ul>
      <li></li>
      <li></li>
      <li></li>
    </ul>
  </div> //crea una lista no ordenanda anidada dentro de un <div>

3.- Agregar comentarios a JSX
	para hacerlo la sintaxis es la siguiente {/*tu comentario*/}, este puede o no estar anidado en el elemento parent
const JSX = (
  <div>
  {/*yo mama*/}
    <h1>This is a block of JSX</h1>
    <p>Here's a subtitle</p>
  </div>
);//la sintaxis con parentesis y ";" es opcional pero se considera buena practica


4.- Render elements to the DOM
	Lo que en escencia hace es presentar un elemento JSX definido con anterioridad se usa ReactDOM, que permite cargar de manera
	directa elementos de REACT a dom siguiendo la sintaxis del ejemplo
const JSX = (
  <div>
    <h1>Hello World</h1>
    <p>Lets render this to the DOM</p>
  </div>
);
// Change code below this line
ReactDOM.render(JSX, document.getElementById("challenge-node"));



5.- Definir una clase en JSX 
	Es importante dado que class en una palabra reservada en JavaScript y es por esto que es necesario escribirlo como 
	className, esto afecta a toda la sintaxis de HTML por ejemplo onclick se transforma en onClick respetando camelCase usado
	en javaScript
const JSX = (
  <div className="myDiv">
    <h1>Add a class to this div</h1>
  </div>
);

6.- Tag que se autocierran
	En HTML existen clases que se cierran solas como <br> o <hr> pero en React o existen o cambian por ejemplo  a <br/> y <hr/>
	en otros casos esto se puede usar en otras tags como <div/> que servir[ia para dibujar alg[un elemento despue[s
const JSX = (
  <div>
    <h2>Welcome to React!</h2> <br />
    <p>Be sure to close all tags!</p>
    <hr />
  </div>
);

7.- Crear  componentes de funciones sin estado 
	Se crea una funcion de React que permite manejar funciones sin estado que regresan elementos de HTML en ejemplo se ve cual
	es la sintaxis y como usar el return 
const MyComponent = function() {
  // Change code below this line
  return(
    <div>
      <p>Death is the best band in the world</p>
    </div>
  );
  // Change code above this line
}

8.- Crear un componente de React
	La manera de hacerlo es usando la sintaxis de clases de ES6 en este caso la clase que se define extiende a React.Component()
	para poder presentar los elementos que se defienen
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    // Change code below this line
  return(
    <div>
      <h1>Hello React!</h1>
    </div>
  );
    // Change code above this line
  }
};

9.- Crear un componente usando Composition
	si se tiene la situaci[on donde se necesita o se tienen definidos multiplec componentes de una app se tiene que anidar todos
	en un padre que los organice y los muestre para hacerlo llamamos el nombre la funci[on del componente como un una tag
	personalizada de HTML usando la sintaxis <mi componente/>
const ChildComponent = () => {
  return (
    <div>
      <p>I am the child</p>
    </div>
  );
};

class ParentComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>I am the parent</h1>
        { /* Change code below this line */ }
          <ChildComponent/>

        { /* Change code above this line */ }
      </div>
    );
  }
};

10.- Presentar componentes anidados
	Se usa la sitnaxis pasada para realizar anidaci[on de vario elementos de nuestra app
const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* Change code below this line */ }
        <TypesOfFruit/>
      { /* Change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
          <Fruits/>
        { /* Change code above this line */ }
      </div>
    );
  }
};

11.- Componentes compuesto React
	Las clases definidas usando la sintaxis ES6 se puede llamar como en el ejemplo anterior usando <miFuncion/>  ser presentada
class Fruits extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h2>Fruits:</h2>
        { /* Change code below this line */ }
          <NonCitrus/>
          <Citrus/>
        { /* Change code above this line */ }
      </div>
    );
  }
};

class TypesOfFood extends React.Component {
  constructor(props) {
     super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
        <Fruits/>
        { /* Change code above this line */ }
        <Vegetables />
      </div>
    );
  }
};

12.- Presentar una clase de componente en DOM
	 usa la sintaxis pasada si es que hay anidaci[on y ReactDom.render, explicado en el punto 5 para presentarlo en DOM, la 
	sintaxis de la clase cambia por su definici[ion como ES6 y se tiene usar  la sintaxis <miClase/>
class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        {/* Change code below this line */}
        <Fruits/>
        <Vegetables/>
        {/* Change code above this line */}
      </div>
    );
  }
};

// Change code below this line
ReactDOM.render(<TypesOfFood/>, document.getElementById("challenge-node"));

13.- Mi primer componente
class MyComponent extends React.Component{
    constructor(props){
        super(props);
    }
    render(){
        return(
            <div>
                <h1>My First React Component!</h1>
            </div>
        );
    }
}
ReactDOM.render(<MyComponent/>, document.getElementById("challenge-node"));


14.- Pasar props a funciones stateless
	En el ejemplo se presenta informaci[on de un componente parent de un child con informaci[on de un tercero, para hacerlo
	se define la fucn[on va a necesitar un elemento como parametro, se hace desde el parent que se pasa la funci[[on con la
	info y el parametro el child da forma a esta informaci[on y el parente la presenta
const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
      <p>The current date is: {props.date} </p>

      
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date={Date()} />
        { /* Change code above this line */ }
      </div>
    );
  }
};


15.- Pasar un arreglo
	Para pasar arreglos como props estos se deben pasar siguiendo la sintaxis de JS usando {}, los metodos de los arreglos
	que existen en JavaScript est[an tambien disponibles en React 
const List = (props) => {
  { /* Change code below this line */ }
  return <p>{props.task.join(" ,")}</p>//se procesa la informaci[on se le da formato
  { /* Change code above this line */ }
};

class ToDo extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>To Do Lists</h1>
        <h2>Today</h2>
        { /* Change code below this line */ }
        <List task={["walk","dog","workout"]}/>//se pasa la informaci[on de manera cruda
        <h2>Tomorrow</h2>
        <List task={["Jomati","catalogo","Mercado","Libre"]}/>
        { /* Change code above this line */ }
      </div>
    );
  }
};

16.- Asignar un valor Default a un prop
	Se puede establecer un valor default a una prop haciendo las veces de un valor el cual usar si no se pasa ning[[un valor
	este es el que se va como el valor de props, el metodo que se usa es defaultProps()
const ShoppingCart = (props) => {
  
  return (
    <div>
      <h1>Shopping Cart Component</h1>
    </div>
  )
};
// Change code below this line
ShoppingCart.defaultProps ={
    items: 0
  }


17.- SobreEscribir un valor default
	Para hacerlo en el parent se asigna el valor de manera normal, claro respetar el tipo de valor que se pasa en el ejemplo 
	es un integro y se pasa sin comillas
const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
}

Items.defaultProps = {
  quantity: 0
}

class ShoppingCart extends React.Component { //valor default
  constructor(props) {
    super(props);
  }
  render() {
    { /* Change code below this line */ }
    return <Items quantity={10}/>        //se sobreescribe el valor default y se muestra el nuevo valor
    { /* Change code above this line */ }
  }
};


18.- Usar prototipos para definir props que se esperan
	Se usa propTypes del mismo modo se usa defaultProps(), la sintaxis es MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }
	dentro del PropTypes se define el tipo de valor que se espera, https://reactjs.org/docs/typechecking-with-proptypes.html
	en la documentacion aparacer cuales son esto valores, al finalizar el tipo de valor o condici[on que se espera se tiene 
	que usar .isRequierd 
const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
};

// Change code below this line
Items.propTypes = {
  quantity: PropTypes.number.isRequired //es este el ejemplo para un tipo de valor number
}
// Change code above this line

Items.defaultProps = {
  quantity: 0
};

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <Items />
  }
};



19.- Accesar props usando this.props
	se usa la sintaxis dentro del child {this.props.nombreDeValor}	con esto se gana la misma funcionalidad que usando la sintaxis
	que se ha usado hasta ahora
class ReturnTempPassword extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
            { /* Change code below this line */ }
            <p>Your temporary password is: <strong>{this.props.tempPassword}</strong></p>//se usa la sintaxis this para invocar el props
            { /* Change code above this line */ }
        </div>
    );
  }
};

class ResetPassword extends React.Component {
  constructor(props) {
    super(props);

  }
  render() {
    return (
        <div>
          <h2>Reset Password</h2>
          <h3>We've generated a new temporary password for you.</h3>
          <h3>Please reset this password from your account settings ASAP.</h3>
          { /* Change code below this line */ }
<ResetPassword tempPassword={"YoMamaDanceRegueton"}/> //se define props de manera normal en el parent
          { /* Change code above this line */ }
        </div>
    );
  }
};

20.- Resumen de uso de Prop con componentes funcionales sin estado
	Los componentes sin estado o stateless function es una companente que se comporta como una funci[on, en el caso de un
	staless functional component de React estos componente sin estado son todas las funciones que reciben un prop y regresan un JSX,
	A diferencia de un staless component es un componente que extiende React.Component, pero no tiene un estado interno.
	Un componente statfull component es un componente que s[i mantiene un estado de manera interna.
	Un patron es el de minimizar el uso de componentes con estado y maximizar el uso de componente sin estado, esto hace m[as
	sencillo seguir el estado de la aplicaci[on mantenerla y saber que est[a pasando
class CampSite extends React.Component { //componente que muestra camper
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Camper/> //no muestra nada hasta que se le da algo que mostrar desde camper
      </div>
    );
  }
};
// Change code below this line
const Camper = props =>  <p>{props.name}</p>;//se define Camper con su props como name
	
Camper.defaultProps ={ // se define camper y su default prop, como CamperBot
  name: 'CamperBot'
};
Camper.propTypes = {
  name: PropTypes.string.isRequired//se asigna que tiene que ser un porptype de tipo String y es requerido que se cumpla
}


21.- Crear un componente con estado 
	Stateful Component
	Un estado es cualquier informaci[on que la aplicaci[on necesite saber y que pueda cambiar con el tiempo, se quiere que las
	aplicaciones reaccionen a cambios de para poder actualizar la UI 
	Para hacerlo se declara un estado dentro del constructor del componente usando la siguiente informaci[on
	thi.state = { //se describe el estado}
class StatefulComponent extends React.Component {
  constructor(props) {
    super(props);
    // Only change code below this line
    this.state= {
      name: 'The Only and Original Nacho Man Salia'
    }
    // Only change code above this line
  }
  render() {
    return (
      <div>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};


22.- Render un estado a UI
	Lo importante de los estados es que son locales a cada componente, otros componentes no pueden ver que hacen o que son,
	se tiene que tener cuidado con esto dado que otros componentes no conocen el estado, los estados son accesibles al 
	render del componente y tiene la sintaxis <h1>{this.state.name}</h1>
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
          <h1>{this.state.name}</h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};

23.- Otra forma de render estado en UI
	Se puede usar la informacion del estado antes de que se use en el return de render del componeten, realizar cualquier 
	acci[on o calculo que haga falta almacenarla en una variable y desp[ues presentar la informaci[on 
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    // Change code below this line
  const name = this.state.name; //variable con la informacion de state, con esta se puede cambiar o hacer lo que se quiera con ella

    // Change code above this line
    return (
      <div>
        { /* Change code below this line */ }
          <h1>{name}</h1> //se presenta la variable que se definio antes de return
        { /* Change code above this line */ }
      </div>
    );
  }
};


24.- Establecer un estado usando setState
	La funci[on setState responde a una accion por ejemplo a que se presione un boton, dentro de ella se puede y se cambia el
	valor del estado siguiendo la sintaxis de props y variable que se ha visto {name: "React"}
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Initial State'
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {
    // Change code below this line
  this.setState({name: "React Rocks!"})
    // Change code above this line
  }
  render() {
    return (
      <div>
        <button onClick={this.handleClick}>Click Me</button>
        <h1>{this.state.name}</h1>
      </div>
    );
  }
};

25.- Bind para this a un metodo de la clase
	this se refiere en este contexto al companente, pero para que un metodo use this tenemos que ligarlo (bind) a ese metodo
	this.handleClick = this.handleClick.bind(this), se establece que this.handleClick se acciona sobre this estan ligados
	en el ejemplo con dar un click
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: "Hello"
    };
    // Change code below this line
  this.handleClick = this.handleClick.bind(this)//se liga this con la accion del componente handleClick
    // Change code above this line
  }
  handleClick() {
    this.setState({
      text: "You clicked!"
    });
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
        <button onClick={this.handleClick}>Click Me</button>//se liga la accion del boton con this.handleClick
        { /* Change code above this line */ }
        <h1>{this.state.text}</h1>
      </div>
    );
  }
};

