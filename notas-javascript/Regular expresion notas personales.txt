Regular Expressions
	Son strings especiales que representan un patron a buscar, son conocidas como regex o regexp, ayudan al programador, a 
	encontrar, remplazar y empalamar texto. Las expreciones Regular pueden parecer extrañas por que algunos caracteres son
	especiales, tienen un significado especial. el objetivo es usar esto caracteres y los simbolos para encontrar lo que se 
	está buscando, pero sólo lo que se está buscando.

	Si se quiere encontrar el una regex o definirlo
	se tiene que usar /string/ que se busca, esto hace que se busque s[olo este string, para saber si se encontro dentro del
	string a evaluar tenemos que hacer lo siguiente, usar la funci[on test(string), [esta evalua la string y regresa un true 
	o false dependiendo si lo encuentra o no
	Ejemplo:
	let myString = "Hello, World!";
	let myRegex = /Hello/;
	let result = myRegex.test(myString); //en result se guadrda si se encuentra o no el regex Hello

	**Cabe destacar que es tipo strick los regex esto quiere decir que en el ejemplo de abajo
	Ejemplo:
	let waldoIsHiding = "Somewhere Waldo is hiding in this text.";
	let waldoRegex = /Waldo/; // Change this line
	let result = waldoRegex.test(waldoIsHiding);
	
	-Waldo regex no va buscar o hacer match con "waldo" o "WAldo", en este primer uso se tiene que no se encuentra coincidencia
	y la funci[on test() retorna un false

	
	Encontrar coincidencias con multiples posibilidades
	Para hacerlo hay que usar el operador OR, al igual que en una condición IF podemos usarlo para buscar dos o más opciones, 
	Como se ve en el ejemplo:
	let petString = "James has a pet cat.";
	let petRegex = /dog|cat|bird|fish/; // Va a busar entre est[as opciones hasta encontrar una coincidencia o retornara un false
	let result = petRegex.test(petString);

	Ignorar si la string est[a en Mayusculas o minusculas
	Existe una bandera (flag) para hacer esto en este caso la bandera es i esta bandera se usa en la sintaxis del regex de la
	siguiente manera: let myRegex = /miAmor/i; en esta caso no importara si se encuentra "MiAmor" o "miamor", regresar[a un 
	True la funci[on test(); como se ve en el ejemplo
	Ejemplo:
	let myString = "freeCodeCamp";
	let fccRegex = /freeCodeCamp/i; // Change this line
	let result = fccRegex.test(myString);


	Extraer las coincidenicas
	para hacerlo se usa la funci[on match(), esta funci[on cuenta con una sintaxis diferente a test(); en el caso de test se 
	tiene que regex.test(string); mientras que en el caso de match es string.match(/regex/); match nos va a regresar el match
	que encuentre
	Ejemplo:
	let extractStr = "Extract the word 'coding' from this string.";
	let codingRegex = /coding/; // vamos a buscar un match con coding
	let result = extractStr.match(codingRegex); // vamos a guardar si es que existe ese match en result, no un booleano como en test()


	Encontrar y extrar m[as de un resultado
	Para hacerlo usamos la bandera g, en este caso match retorna un arreglo con todas las coincidencias, nos permite entonces
	encontrar todas las coincicencias y adem[as de esto podemos usar varias banderas juntas cuando sea necesario
	Ejemplo:
	let twinkleStar = "Twinkle, twinkle, little star";
	let starRegex = /Twinkle/gi; // se busca 'Twinkle' y se quieren todas las coincidenica adem[as de todos sin importar si son
				     //mayusculas o minusculas
	let result = twinkleStar.match(starRegex); // nos retorna el arreglo que cumple con el regex


	Comidin para usar en un regex
	El comodin en regex es '.' llamda dot o period sirve para cuando se buscan coincidencia que comparte elementos en com[un
	se puede usar en match() y en test() como se ve en el ejemplo
	Ejemplo:
	let exampleStr = "Let's have fun with regular expressions!";
	let unRegex = /.un/; // Change this line
	let result = unRegex.test(exampleStr);


	Cuando se quiere encontrar multiples coincidencias de un grupo de caracteres
	Esto es cuando se tiene muchas posibilidades de un grupo de vocales (por ejemplo) de una palabra, estos caracteres pueden
	ser cualquiea y para definirlos como una clase de caracteres lo que se tiene que hacer es defenirlo dentro del regex usando
	[] corchetes como se ve en el ejemplo, el ejemplo tambi[en se ve como se puede usar las banderas con estos casos
	cabe resaltar que dentro de los corchetes no hace falta separar los caracteres de ningun modo dado que queda claro cada
	uno es un caso en particular y no un string
	Ejemplo:

	let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
	let vowelRegex = /[aeiou]/gi; // se crea una clase de caracteres, para las vocales, se quiere todos los casos g y se quiere
				      //sin importar si sin mayusculas o minusculas se usa i como bandera
	let result = quoteSample.match(vowelRegex); // se guarda el arreglo de todos los resultados
	
	Buscar las letras dentro de un rango 
	por ejemplo encontra todas las letras entre a y d se usa el "-" para definir que es una clase de caracteres compuesta por
	el rango de letras en entre a y d en el ejemplo se ve el caso para todas las letras del abecedario
	Ejemplo:
	let quoteSample = "The quick brown fox jumps over the lazy dog.";
	let alphabetRegex = /[a-z]/ig; // busca todas las letras en el rango del abecedario sin importa las veces que se repiten
				       // o si son mayusculas o minusculas
	let result = quoteSample.match(alphabetRegex); // guarda el arreglo del resultado


	Este caso se puede usar tambi[en para rangos de numeros como en este ejempl:
	let quoteSample = "Blueberry 3.141592653s are delicious.";
	let myRegex = /[h-s2-6]/gi; // busca la clase de caracteres de h a la s y el rando de 2 a 6
	let result = quoteSample.match(myRegex); 

	
	Excluir caracteres de una busqueda de Regex
	En este caso el ^ es el que indica que clases de caracteres se van a escluir en el ejemplo, se excluyen todas las vocales y
	todos lo numero de la busqueda, permitiendo todos los otro caracteres sin importar cuantas veces se repitan o si sin 
	mayusculas o minusculas
	Ejemplo:
	let quoteSample = "3 blind mice.";
	let myRegex = /[^aeiou0-9]/gi; // importante respetar la sintaxis de [] para poder utilizar ^ de otra manera s[olo lo inclu
				       // ye en la busqueda del match
	let result = quoteSample.match(myRegex); 


	Encontrar coincidencias que una o más veces:
	para esto se usa el signo + de junto al caracterer que se quiere encontrar se puede usar igual
	que los otros caracteres especiales y las banderas para mejorar la busqueda como en el ejemplo
	Ejemplo:
	let myRegex = /s+/g; busca todas las s en una string

	Encontrar coincidencias que suceden  cero o más veces:
	Cabe señalar que es diferencia al signo especial +, en este caso el signo * busca coincidenicas
	parciales, esto puede ser que la coincidencia no se cumpla por completo pero se encuentren 
	resultados parciales o parecidos a los que se quiere encontrar, en este caso se tiene que
	para tener un resultado se tiene que cumplir que se encuetra el primer caracter que se define
	no hay necesidad de banderas dado que se busca un resultado de tipo strick
	Ejemplo:
	let chewieRegex = /Aa*/; // va buscar un string que empiece con una A mayuscula y este acompañado
				 // por una a minuscula


	Encontrar caracteres con coincidencia tipo Lazy:
	Hay dos tipos de busqueda uno es "greedy", este tipo busca el resultado con más caracteres
	por otro lado está el tipo "lazy" que busca el string más pequeño posible, un ejemplo es el 
	regex /t[a-z]*i/ este regex busca una cadena que empiece con t y termine en i, con n cantidad
	de letras del abecedario, en medio si usamos la string "titanic", este regex regresará como
	resultado el ["titanic"] exacto, por otro lado si lo que se busca es un resultado más corto
	se puede usar ? como bandera del regex en este caso así /t[a-z]*?i/ en este caso el resultado
	es ["ti"]
	Ejemplo:
	let myRegex = /<.*?1>/; //busca un mach en una cadena con <h1> de manera lazy y estricta
				//ignora por completo los demás más coincidencias sólo la más 
				//corta es regresada


	 Encontrar sólo coincidencias al principio de una cadena
	Tenemos que podemos usar de nuevo el caracter ^ (llamdado caret) para hacerlo en escaso 
	podemos hacerlo con la
	siguiente sintaxis /^"string"/ y obtenr el resultado si es que coinciden
	Ejemplo:
	let myRegex = /^Cal/; //busca un que la primera parte de la string sea "Cal" de serlo retorna
			      //un true o un false



	Encontrar coincidencias en el final de la cadena
	El caracter caret ^ para encontrar coincidencia al principio de una cadena pero si se quiere
	encontrar al final de una cadena se usa el carecter signo de dollar $ al final de nuestro regex
	la sintaxis es la siguiente /"string"$/ como en el ejemplo
	Ejemplo:
	let myRegex = /caboose$/; // se busa al final de la string el string "caboose"


	Para encontrar el resultado cuando se buscan todas las letras y numeros
	para esto todas las letras del alfabeto y todos los numeros tenemos que se puede crear una 
	colección de caracteres como este /[A-Za-z0-9]/ pero en javascript existe otro modo más 
	sencillo tenemos es una clase de caracteres pre definida, con este propocito y es \w que se 
	usa para este proposito puede ser útil para contar el número de caracteres un una string
	cabe resaltar que se esta colección retorna la colecion /[A-Za-z0-9_]/ que incluye el signo 
	_
	Ejemplo:
	let myRegex = /\w/g // se buscan todos los caracteres de \w además se busca que sean globlales
			   // sin importar cuantas veces se repitan


	Econtrar todo menos letras y números
	para hacerlo existe una coleccion de caracteres igual que \w pero es su contrario tiene todos
	los caracteres menos las letras y los números, y es \W la diferencia es que la W es mayuscula
	en este caso sería simila a usar caret ^ para excluir resultados
	Ejemplo:
	let myRegex = /\W/g; //busca todos los caracteres que no sean letras ni numeros sin importar
			     //cuantas veces se repita


	Encontrar todos los números en un regex
	para poder hacer esto se usa el caracter especial \d con este caracter dentro de nuestro regex podemos encontrar todos
	los números, como se muestra en la sintaxis /\d/ y como en el ejemplo
	Ejemplo:
	
	let movieName = "2001: A Space Odyssey";
	let numRegex = /\d/g; // Change this line
	let result = movieName.match(numRegex).length;


	Encontrar todos los no numeros
	Para hacer esto se usa \D con mayuscula que es el complemento de \d que se usa para todos los n[umeros, usando esta colecci[on
	de caracteres como en el ejemplo
	Ejemplo:
	let movieName = "2001: A Space Odyssey";
	let noNumRegex = /\D/g; // Nos regresa todos los no n[umeros en el string, sin importar cuantas veces se repitan		
	let result = movieName.match(noNumRegex).length;



	Encontrar usando un regex los espacios en blanco
	para eso existe una clase de caracteres que se reprensta en la forma \s este represanta esta clase de caracteres [ \r\t\f\n\v]
	Ejemplo 
	let sample = "Whitespace is important in separating words";
	let countWhiteSpace = /\s/; // Al igual que las otras clases de carcteres tenemos que usar la bandera g para encontrar m[as de una
				    // coincidencia
	let result = sample.match(countWhiteSpace);


	Encontrar todos los contrarios a espacios v[acios
	Para hacerlo existe una clase completmento a \s y es como en los otros casos la represntada por una letra mayuscula \S
	Ejemplo:
	let sample = "Whitespace is important in separating words";
	let countNonWhiteSpace = /\S/g; // igual que los casos de todos las letras y todos los n[umero el complemento se representa
				 	// por la letra mayuscula que representa la clase de caracteres
	let result = sample.match(countNonWhiteSpace);
	

	Encontrar el n[umero de veces que se repite un caracteres dentro de un rango
	Tenemos que se quiere encontrar un caracteres que se repite cierto n[umero de veces m[iminas y numero de veces m[aximas
	es un rango abierto, para representarlo tenemos {minR,maxR}
	Ejemplo:
	let ohStr = "Ohhh no";
	let ohRegex = /Oh{3,6}\sno/; // s[olo coincide cuanto h se repite dentro del string "Oh no" de 3 veces m[inimas a 6 veces maximas
	let result2 = ohRegex.test(ohStr);


	En el caso de encontrar de condicionar un rango m[aximo infinto
	Es decir para cumplir la condici[on del regex se deben tener m[as n+ coincidencias en el rango, para hacer se hace as[o
	{n,} se deja sin especificar un rango maximos de veces repetida
	Ejemplo:
	let haStr = "Hazzzzah";
	let haRegex = /Haz{4,}ah/; // s[olo coincide cuando z se repite m[as de 4 veces
	let result = haRegex.test(haStr); 

	Especifiacar el n[umero exacto de coincidencias
	Se tiene que para encontrar el coincidencia cuando se repite el numero exacto de veces que se repite un caracter se usan
	{n} con esto solo se coincide cuando se repite exactamente n veces
	Ejemplo:
	let haStr = "Hazzzzah";
	let haRegex = /Haz{4}ah/; // s[olo coincide cuando z se repite 4 veces exactas
	let result = haRegex.test(haStr);

	Especificar un comidin que talvez existe un caracter o no
	Para hacerlo se usa ? en este caso se tiene que puede o no existir el caracter de hacerlo retorna un true de no hacerlo
	retorna un true tambi[en mientrar que el resto del regex se cumpla
	Ejemplo:
	let favWord = "favorite";
	let favRegex = /favou?rite/; // busca coincidencia el la manera de escribir favorite en US ingles y en britsh ingl[es
	let result = favRegex.test(favWord);

	Ejemplo look aheads
	let sampleWord = "astronaut";
let pwRegex = /^\D(?=\w{5})(?=\w*\d{2})/i; // regex checa que comience con un caracteres diferente a un numero, tenga una longitud
					   //mayor a 5 caracteres y que demenos tenda 2 n[umeros
let result = pwRegex.test(sampleWord);

	Ejemplo checar por condicones combinadas usando parentesis
	let myString = "Eleanor Roosevelt";
	let myRegex = /(Eleanor|Franklin).*Roosevelt/i; // Change this line
	let result = myRegex.test(myString); // Change this line
	// After passing the challenge experiment with myString and see how the grouping works


	Ejemplo de encontrar una reptici[on de una sequencia
	let repeatNum = "42 42 42";
	let reRegex = /^(\d+)\s\1\s\1$/; // la sintaxis es (coleccion de caracteres)\"numero de veces que se repita la secuencia
		//explicaci[on de este codigo, queremos encontrar una string de n[umeros, est[a esta acompa;ada despues por un espacio
		//esta se repite y despu[es tenemos otro espacio y al fianl ya quermos que se deje de repetir cuando no hay m[as espacios
		
	let result = reRegex.test(repeatNum);



	Funci[on replace con regex
	Se pude usar regex para encontrar una string y con replace cambiarla por otra adem[as de esto podemos, cambiar el orden de 
	la string sintaxis replace( /(\w+)\s(\w+)/, '$2 $1') el signo $n es la representaci[on de la posici[on de las string en este
	caso se van a intercambiar la primera por la segunda string cambiand e lugar
	Ejemplo:
	let str = "one two three";
	let fixRegex = /(\w+)\s(\w+)\s(\w+)/; // regex que busca 3 strings compuestas por letras n numero de elemnetos con dos espacios
	let replaceText = "$3 $2 $1"; // Se indica que se cambia el orden de las strings
	let result = str.replace(fixRegex, replaceText); //la funci[on replace trabajando sobre str y regresando sus elementos (cuando
							//coinciden con fixRegex, cambiando si orden como lo indica replaceText


	Ejemplo usar Regex para quitar los espacios en blanco al comienzo y al final de un string
	let hello = "   Hello, World!  ";
	let wsRegex = /^\s+|\s+$/gm; // busca los espacios al comienzo y al final de la string
	let result = hello.replace(wsRegex,''); // el replace retira los espacios que coinciden con el reges wsRegex

